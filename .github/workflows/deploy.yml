name: CI/CD â€“ Football Alerts

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write  # needed for OIDC auth to AWS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        working-directory: infra/lambda
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install pytest boto3 moto

      # ... (after your 'Install dependencies' step)

      - name: Verify Lambda Package Size
        working-directory: infra
        run: |
          # 1. Determine the path and name of the final ZIP artifact (adjust this path if needed)
          ZIP_FILE="../lambda.zip" 
          
          # Assuming your data.archive_file creates the zip in the infra folder.
          # If the zip is created in infra/lambda/, adjust the path: ZIP_FILE="lambda/lambda.zip" 

          # 2. Check Zipped Size (MB)
          ZIPPED_MB=$(du -m $ZIP_FILE | awk '{print $1}')
          echo "Lambda Package Zipped Size: ${ZIPPED_MB} MB"
          
          # 3. Check Unzipped Size (The Critical Check)
          # We'll create a temporary directory, unzip the contents, and measure it.
          mkdir -p /tmp/lambda_check
          unzip -q $ZIP_FILE -d /tmp/lambda_check
          
          UNZIPPED_MB=$(du -m /tmp/lambda_check | awk '{print $1}')
          echo "Lambda Package Unzipped Size: ${UNZIPPED_MB} MB"
          
          # 4. Enforce the AWS Limit (250MB) - Fail the build if too large
          MAX_UNZIPPED_MB=250
          if [ ${UNZIPPED_MB} -ge ${MAX_UNZIPPED_MB} ]; then
            echo "::error::ERROR: Lambda deployment package unzipped size (${UNZIPPED_MB} MB) is at or above the 250 MB AWS limit. You must use Lambda Layers or Docker containers."
            exit 1
          fi
          
          # 5. Clean up
          rm -rf /tmp/lambda_check

      - name: Run tests
        working-directory: infra/lambda
        env:
          AWS_REGION: eu-west-2
        run: |
          source .venv/bin/activate
          pytest -v

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""  # ðŸ‘ˆ This is key â€” tells Terraform not to look for your local profile
        run: terraform init -input=false -reconfigure

      - name: Terraform Format & Validate
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""  # ðŸ‘ˆ This is key â€” tells Terraform not to look for your local profile
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Plan
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""  # ðŸ‘ˆ This is key â€” tells Terraform not to look for your local profile
        run: terraform plan -input=false

      # Optional automatic deploy on main
      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        working-directory: infra
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""  # ðŸ‘ˆ This is key â€” tells Terraform not to look for your local profile
