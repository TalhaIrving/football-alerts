name: CI/CD – Football Alerts

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write  # needed for OIDC auth to AWS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        working-directory: infra/lambda
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install pytest boto3 moto

      - name: Run tests
        working-directory: infra/lambda
        env:
          AWS_REGION: eu-west-2
        run: |
          source .venv/bin/activate
          pytest -v

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""
        run: terraform init -input=false -reconfigure
        
      # ⚠️ TEMPORARY STEP TO FIX ResourceAlreadyExistsException ⚠️
      # This step imports the existing log group created by the Lambda runtime
      # The target resource name is "aws_cloudwatch_log_group.lambda_log_group"
      # The ID in AWS is the log group name: "/aws/lambda/football-alerts-lambda"
      - name: "TEMPORARY: Import Existing Log Group"
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""
        run: |
          ## The '|| true' ensures the workflow doesn't fail if the resource is already in state or doesn't exist
          terraform import aws_cloudwatch_log_group.lambda_log_group /aws/lambda/football-alerts-lambda || true

      - name: Terraform Format, Validate, and Plan
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""
        run: |
          # 1. Install unzip dependency for size checks
          sudo apt-get update && sudo apt-get install -y unzip
          
          # 2. Run terraform commands (forces zip creation)
          terraform fmt -recursive
          terraform validate
          terraform plan -destroy -out=out.plan
          rm out.plan
          
          # 3. Path to the ZIP file (created by the plan command above)
          ZIP_FILE="./lambda.zip" 
          
          # 4. Check Unzipped Size (The Critical 250MB Check)
          mkdir -p /tmp/lambda_check
          unzip -q $ZIP_FILE -d /tmp/lambda_check
          
          UNZIPPED_MB=$(du -m /tmp/lambda_check | awk '{print $1}')
          
          # 5. Enforce the AWS Limit (250MB) - Fail the build if too large
          MAX_UNZIPPED_MB=250
          if [ ${UNZIPPED_MB} -ge ${MAX_UNZIPPED_MB} ]; then
            echo "::error::ERROR: Lambda deployment package unzipped size (${UNZIPPED_MB} MB) is at or above the 250 MB AWS limit. You must use Lambda Layers or Docker containers."
            exit 1
          fi
          
          # 6. Clean up
          rm -rf /tmp/lambda_check
          
      - name: Terraform Plan
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""
        run: terraform plan -input=false

      # Optional automatic deploy on main
      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        working-directory: infra
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-2
          TF_VAR_aws_profile: ""
